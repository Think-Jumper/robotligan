#version 440 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) writeonly uniform image2D write_img;

uniform sampler2D texture_depth;
uniform sampler2D texture_noise;

uniform vec3 samples[64];
uniform mat4 projection;
uniform mat4 inv_projection;
uniform vec2 size;
uniform vec2 screen_dims;

uniform float near;
uniform float far;

const float radius = 1.0;
const float bias = 0.1;

float linearDepth(float depth)
{
	return far*near/(depth * (near - far) + far);
}

vec3 worldPos(vec2 uv) 
{
	float depth = texture(texture_depth, uv).r;
	vec3 ndc = vec3(uv*2.-1., depth);
	vec4 world_pos = inv_projection * vec4(ndc, 1);
	return world_pos.xyz / world_pos.w;
}

// TODO: change to shared memory
vec3 calcNormal(vec2 uv, vec3 curr)
{
	vec3 t = vec3(1.0/size, 0);
	vec3 up = worldPos(uv+t.zy);
	vec3 down = worldPos(uv-t.zy);
	vec3 right = worldPos(uv+t.xz);
	vec3 left = worldPos(uv-t.xz);

	float sgn = 1.0;
	vec3 vert = up;
	vec3 hori = right;

	if(length(down - curr) < length(up-curr))
	{
		vert = down;
		sgn = -sgn;
	}
	if(length(left - curr) < length(right-curr))
	{
		hori = left;
		sgn = -sgn;
	}

	vec3 v1 = hori - curr;
	vec3 v2 = vert - curr;
	return sgn*normalize(cross(v1, v2));
}
/*
vec3 calculateTangent(vec3 n, vec3 rnd) {
	vec3 tangent = cross(n, rnd);
	if(length(tangent) < 0.01) {
		tangent = cross(n, rnd.zxy);
	}
	return normalize(tangent);
	//return n.yxz;
}
*/

//https://www.shadertoy.com/view/4djSRW
#define HASHSCALE1 412.1975
float hash12(vec2 p)
{
	vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}
float sHash12(vec2 p)
{
	return 2.*hash12(p) - 1.f;
}

float depth(vec2 uv) {
	return texture(texture_depth, uv).r;
}

const int NUM_SAMPLES = 8;

vec3 getSample(vec2 uv, int i)
{
	float scale = i / float(NUM_SAMPLES);
	vec3 vec;
	vec.x = 2.*hash12(uv+3)-1.;
	vec.y = 2.*hash12(uv+4)-1.;
	vec.z = hash12(uv+5);
	//scale = mix(0.1f, 1.0, scale*scale);
	return scale * hash12(uv+6) * normalize(vec);
}

vec3 calcTangent(vec3 normal, vec2 uv, vec2 noise_scale)
{
	vec3 random_vec = vec3(0);//texture(texture_noise, uv * noise_scale).xyz;
	random_vec.x = sHash12(uv);
	random_vec.y = sHash12(uv+2.);
	return normalize(random_vec - normal * dot(random_vec, normal));
}

// TODO: do this http://ogldev.atspace.co.uk/www/tutorial46/tutorial46.html
void main() {
	ivec2 i = ivec2(gl_GlobalInvocationID.xy);
	vec2 v_uv = (vec2(i) + 0.5)/ size;

	vec2 noise_scale = vec2(screen_dims.x / 16.0, screen_dims.y / 16.0);

	float depth = depth(v_uv);
	vec3 frag_pos = worldPos(v_uv);

	mat3 TBN;//= mat3(tangent, bitangent, normal);
	TBN[2] = calcNormal(v_uv, frag_pos);
	TBN[0] = calcTangent(TBN[2], v_uv, noise_scale);
	TBN[1] = cross(TBN[0],TBN[2]);

	float linear_depth = linearDepth(depth);

	float occlusion = 0.0;
	int num_samples = NUM_SAMPLES;
	for(int i = 0; i < num_samples; i++)
	{
		vec3 samp = TBN * getSample(v_uv, i);
		//vec3 samp = TBN * samples[i];
		samp = frag_pos + samp * radius;
		
		vec4 offset = vec4(samp, 1.0);
		offset = projection * offset;
		offset.xyz /= offset.w;
		offset.xy  = offset.xy * 0.5 + 0.5;

		float samp_depth = linearDepth(texture(texture_depth, offset.xy).r);
		float rangeCheck = smoothstep(0.0, 1.0, 0.2*radius/ abs(linear_depth - samp_depth));
		
		occlusion += (samp_depth + bias <= linearDepth(offset.z)  ? 1.0 : 0.0) * rangeCheck;  

		//d = offset.z;
	}
	//imageStore(write_img, i, vec4(d, 0, 0, 0));

	//occlusion*=2.0;
	occlusion = 1. - (occlusion / float(num_samples));
	//occlusion += 0.08;
	occlusion = occlusion * occlusion * occlusion;

	//out_occlusion.r = min(1.0,occlusion);
	
	imageStore(write_img, i, vec4(occlusion, 0, 0, 0.));
	//imageStore(write_img, i, vec4(depth,0,0, 0.));
}
